<<<<<<< HEAD
.. _`Черновики и конструктор черновиков (draftsbuilder)`: https://developer.kontur.ru/doc/extern.drafts
.. _`POST Create draft`: https://developer.kontur.ru/doc/extern.drafts/method?type=post&path=%2Fv1%2F%7BaccountId%7D%2Fdrafts
.. _`PUT Draft`: https://developer.kontur.ru/doc/extern.drafts/method?type=put&path=%2Fv1%2F%7BaccountId%7D%2Fdrafts%2F%7BdraftId%7D
.. _`DELETE Draft`: https://developer.kontur.ru/doc/extern.drafts/method?type=delete&path=%2Fv1%2F%7BaccountId%7D%2Fdrafts%2F%7BdraftId%7D
.. _`GET Draft`: https://developer.kontur.ru/doc/extern.drafts/method?type=get&path=%2Fv1%2F%7BaccountId%7D%2Fdrafts%2F%7BdraftId%7D
.. _`GET Meta`: https://developer.kontur.ru/doc/extern.drafts/method?type=get&path=%2Fv1%2F%7BaccountId%7D%2Fdrafts%2F%7BdraftId%7D%2Fmeta
.. _`PUT Meta`: https://developer.kontur.ru/doc/extern.drafts/method?type=put&path=%2Fv1%2F%7BaccountId%7D%2Fdrafts%2F%7BdraftId%7D%2Fmeta
.. _`POST Check`: https://developer.kontur.ru/doc/extern.drafts/method?type=post&path=%2Fv1%2F%7BaccountId%7D%2Fdrafts%2F%7BdraftId%7D%2Fcheck
.. _`POST Prepare`: https://developer.kontur.ru/doc/extern.drafts/method?type=post&path=%2Fv1%2F%7BaccountId%7D%2Fdrafts%2F%7BdraftId%7D%2Fprepare
.. _`POST Send`: https://developer.kontur.ru/doc/extern.drafts/method?type=post&path=%2Fv1%2F%7BaccountId%7D%2Fdrafts%2F%7BdraftId%7D%2Fsend
.. _`GET DraftTasks`: https://developer.kontur.ru/doc/extern.drafts/method?type=get&path=%2Fv1%2F%7BaccountId%7D%2Fdrafts%2F%7BdraftId%7D%2Ftasks
.. _`GET DraftTask`: https://developer.kontur.ru/doc/extern.drafts/method?type=get&path=%2Fv1%2F%7BaccountId%7D%2Fdrafts%2F%7BdraftId%7D%2Ftasks%2F%7BapiTaskId%7D
.. _`модель данных`: https://developer.kontur.ru/doc/extern.drafts/models
.. _`POST CreateWebDraft`: https://developer.kontur.ru/doc/extern.drafts/method?type=post&path=%2Fv1%2F%7BaccountId%7D%2Fdrafts%2F%7BdraftId%7D%2Fcreate-web-draft 
.. _`GET Drafts`: https://developer.kontur.ru/doc/extern.drafts/method?type=get&path=%2Fv1%2F%7BaccountId%7D%2Fdrafts 
.. _`PATCH DataToSign`: 

Методы для работы с черновиками
===============================

Подробная спецификация методов показана в Swagger в разделе `Черновики и конструктор черновиков (draftsbuilder)`_.

.. note:: Черновик можно отправить только один раз. После успешной отправки черновик будет храниться в течение 1 года. 

Список доступных методов:

* `Создание черновика`_
* `Получение черновика`_
* `Получение списка черновиков`_
* `Редактирование черновика`_
* `Удаление черновика`_
* `Получение описания черновика`_
* `Редактирование описания черновика`_
* `Проверка документов в черновике`_
* `Подготовка документов в черновике к отправке`_
* `Отправка документов из черновика`_
* `Получение списка задач черновика`_
* `Проверка статуса задачи черновика по TaskId`_
* `Создание черновика в веб-интерфейсе Контур.Экстерна`_
* ``

.. _rst-markup-createdraft:

Создание черновика 
------------------

Метод: `POST Create draft`_

С помощью метода можно создать черновик. В запросе необходимо передать метаинформацию о налогоплательщике, отправителе и получателе:

* ``payer`` – налогоплательщик (НП), организация, за которую отправляется отчетность;
* ``sender`` – отправитель. Организация, которая общается с контролирующими органами, отправляет и получает документы. Payer и sender могут совпадать.
* ``recipient`` – получатель документооборота, т.е. контролирующий орган (КО).

В моделе ``sender`` в параметре ``certificate`` необходимо передать контент сертификата в формате base64, который будет использован для подписания документов.

В ответе метод вернет метаинформацию черновика, которую передали при запросе. А также идентификатор черновика и ссылки для работы с ним. 

Метаинформацию можно отредактировать или дополнить, используя метод `Редактирование описания черновика`_. 

.. _rst-markup-draft:

Получение черновика 
-------------------

Метод: `GET Draft`_

В ответ на вызов данного метода можно получить всю актуальную информацию по черновику:

* заполненную метаинформацию на момент вызова метода;
* перечень документов находящихся в черновике;
* статус черновика. В зависимости от этапа работы с черновиком ему присваивается свой статус:

    * ``new`` — новый;
    * ``checkInProgress`` —  в процессе проверки;
    * ``checked`` — проверенный;
    * ``prepareInProgress`` — в процессе подготовки к отправке;
    * ``readyToSend`` — подготовленный к отправке;
    * ``sendInProgress`` — в процессе отправки;
    * ``sent`` - отправленный;
    * ``transferredToWeb`` - перемещенный в веб-интерфейс Контур.Экстерна;
    * ``sentViaWeb`` — отправленный через веб-интерфейс.

Если черновик уже был отправлен, то будет ссылка на созданный документооборот.

Получение списка черновиков
---------------------------

Метод: `GET Drafts`_

С помощью метода можно получить список созданных черновиков для указанной учетной записи. В ответе метод вернет актуальную информацию по каждому черновику.

Списки черновиков хранятся постранично. Одна страница содержит 100 черновиков. По умолчанию можно получить одну страницу списка. Если черновиков более 100, то оставшиеся можно получить с помощью параметров ``take`` и ``skip``. Например, чтобы получить 140 черновиков можно сделать два запроса. В первом запросе можно не передавать параметры, тогда по умолчанию вернутся первые 100 черновиков. Во втором запросе можно указать параметры ``skip`` = 100, чтобы пропустить первые 100 черновиков, и ``take`` = 40, чтобы запросить остальные.

Также страницы можно получать с помощью ссылок, которые передаются в возвращаемом параметре ``page-links``:

* поле ``href`` содержит ссылку на опреденную страницу списка черновиков;
* поле ``rel`` содержит подсказку на какую страницу указана ссылка относительно текущей. Может принимать следующие значения:

    * первая страница;
    * последняя страница;
    * текущая страница;
    * предыдущая страница;
    * следующая страница. 

Ссылки может не быть, если запрошена последняя или единственная страница. Также не будет ссылки на предыдущую страницу, если запрошена первая страница. 

Редактирование черновика 
------------------------

Метод: `PUT Draft`_

Метод обновляет значения параметров черновика. Если черновик с переданным идентификатором не существует, метод его создаст. 

Удаление черновика 
------------------

Метод: `DELETE Draft`_

Получение описания черновика 
----------------------------

Метод: `GET Meta`_

Получение только метаинформации черновика.

Редактирование описания черновика 
---------------------------------
Метод: `PUT Meta`_

.. _rst-markup-check:

Проверка документов в черновике 
-------------------------------

Метод: `POST Check`_

Вызовом данного метода можно проверить все документы, находящиеся в черновике. Документы проходят форматно-логические контроли по отдельности, но при наличии нескольких документов в черновике или подписей к документам возможно проведение кросс-проверок, то есть проверок на соответствие документов и подписей между собой. 


.. _rst-markup-prepare:

Подготовка документов в черновике к отправке 
--------------------------------------------

Метод: `POST Prepare`_

С помощью данного метода документы подготавливаются к транспортировке их в контролирующий орган: происходит шифрование и сжатие согласно транспортным протоколам.

.. _rst-markup-send:

Отправка документов из черновика 
--------------------------------

Метод: `POST Send`_

На выходе данного метода получается документооборот, с которым продолжается работа с помощью методов блока :doc:`Docflow</dc/index>`.

.. warning:: Методы ``Check``, ``Prepare``, ``Send`` необходимо выполнять :ref:`асинхронно<rst-markup-deferred>`. При таком вызове будет создана задача, статус выполнения которой можно отслеживать по taskId. 

Получение списка задач черновика
--------------------------------

Метод: `GET DraftTasks`_

.. _rst-markup-DraftTasks:

Проверка статуса задачи черновика по TaskId
-------------------------------------------

Метод: `GET DraftTask`_

Метод  возвращает результат выполнения задачи. Модель ответа зависит от типа поставленной задачи: для задачи проверки вернется `модель данных`_ CheckResult, подготовки - PrepareResult, отправки - Docflow, подписания - CryptOperationStatusResult.


.. _rst-markup-CreateWebDraft:

Создание черновика в веб-интерфейсе Контур.Экстерна
---------------------------------------------------

Метод: `POST CreateWebDraft`_

Метод создает общий черновик в веб-интерфейсе Контур.Экстерна и передает метаинформацию черновика из API. В ответе метод вернет ссылку на созданный черновик в веб-интерфейсе.

**Статусы черновика**

* ``TransferedToWeb`` – черновик перемещен и создан в веб-интерфейсе; 
* ``SentViaWeb`` – черновик отправлен в контролирующий орган через веб-интерфейс. 

**Возможные ошибки**

* 400 BadRequest – нельзя загрузить черновик в веб-интерфейс сервиса: выбран неподходящий тип документооборота, добавлены приложения или черновик имеет неподходящий статус (readyToSent, sent).


.. _rst-markup-datatosign:

Подготовка черновика для добавления подписи
-------------------------------------------

Метод `PATCH DataToSign`_

=======
.. _`Черновики и конструктор черновиков (draftsbuilder)`: https://developer.kontur.ru/doc/extern.drafts
.. _`POST Create draft`: https://developer.kontur.ru/doc/extern.drafts/method?type=post&path=%2Fv1%2F%7BaccountId%7D%2Fdrafts
.. _`PUT Draft`: https://developer.kontur.ru/doc/extern.drafts/method?type=put&path=%2Fv1%2F%7BaccountId%7D%2Fdrafts%2F%7BdraftId%7D
.. _`DELETE Draft`: https://developer.kontur.ru/doc/extern.drafts/method?type=delete&path=%2Fv1%2F%7BaccountId%7D%2Fdrafts%2F%7BdraftId%7D
.. _`GET Draft`: https://developer.kontur.ru/doc/extern.drafts/method?type=get&path=%2Fv1%2F%7BaccountId%7D%2Fdrafts%2F%7BdraftId%7D
.. _`GET Meta`: https://developer.kontur.ru/doc/extern.drafts/method?type=get&path=%2Fv1%2F%7BaccountId%7D%2Fdrafts%2F%7BdraftId%7D%2Fmeta
.. _`PUT Meta`: https://developer.kontur.ru/doc/extern.drafts/method?type=put&path=%2Fv1%2F%7BaccountId%7D%2Fdrafts%2F%7BdraftId%7D%2Fmeta
.. _`POST Check`: https://developer.kontur.ru/doc/extern.drafts/method?type=post&path=%2Fv1%2F%7BaccountId%7D%2Fdrafts%2F%7BdraftId%7D%2Fcheck
.. _`POST Prepare`: https://developer.kontur.ru/doc/extern.drafts/method?type=post&path=%2Fv1%2F%7BaccountId%7D%2Fdrafts%2F%7BdraftId%7D%2Fprepare
.. _`POST Send`: https://developer.kontur.ru/doc/extern.drafts/method?type=post&path=%2Fv1%2F%7BaccountId%7D%2Fdrafts%2F%7BdraftId%7D%2Fsend
.. _`GET DraftTasks`: https://developer.kontur.ru/doc/extern.drafts/method?type=get&path=%2Fv1%2F%7BaccountId%7D%2Fdrafts%2F%7BdraftId%7D%2Ftasks
.. _`GET DraftTask`: https://developer.kontur.ru/doc/extern.drafts/method?type=get&path=%2Fv1%2F%7BaccountId%7D%2Fdrafts%2F%7BdraftId%7D%2Ftasks%2F%7BapiTaskId%7D
.. _`модель данных`: https://developer.kontur.ru/doc/extern.drafts/models
.. _`POST CreateWebDraft`: https://developer.kontur.ru/doc/extern.drafts/method?type=post&path=%2Fv1%2F%7BaccountId%7D%2Fdrafts%2F%7BdraftId%7D%2Fcreate-web-draft 
.. _`GET Drafts`: https://developer.kontur.ru/doc/extern.drafts/method?type=get&path=%2Fv1%2F%7BaccountId%7D%2Fdrafts 
.. _`PATCH DataToSign`: https://developer.kontur.ru/doc/extern.drafts/method?path=/v1/%7BaccountId%7D/drafts/%7BdraftId%7D/documents/%7BdocumentId%7D/data-to-sign&type=patch

Методы для работы с черновиками
===============================

Подробная спецификация методов показана в Swagger в разделе `Черновики и конструктор черновиков (draftsbuilder)`_.

.. note:: Черновик можно отправить только один раз. После успешной отправки черновик будет храниться в течение 1 года. 

Список доступных методов:

* `Создание черновика`_
* `Получение черновика`_
* `Получение списка черновиков`_
* `Редактирование черновика`_
* `Удаление черновика`_
* `Получение описания черновика`_
* `Редактирование описания черновика`_
* `Проверка документов в черновике`_
* `Подготовка документов в черновике к отправке`_
* `Отправка документов из черновика`_
* `Получение списка задач черновика`_
* `Проверка статуса задачи черновика по TaskId`_
* `Создание черновика в веб-интерфейсе Контур.Экстерна`_
* `Подготовка черновика для добавления подписи`_

.. _rst-markup-createdraft:

Создание черновика 
------------------

Метод: `POST Create draft`_

С помощью метода можно создать черновик. В запросе необходимо передать метаинформацию о налогоплательщике, отправителе и получателе:

* ``payer`` — налогоплательщик (НП), организация, за которую отправляется отчетность;
* ``sender`` — отправитель. Организация, которая общается с контролирующими органами, отправляет и получает документы. Payer и sender могут совпадать.
* ``recipient`` — получатель документооборота, т.е. контролирующий орган (КО).

В моделе ``sender`` в параметре ``certificate`` необходимо передать контент сертификата в формате base64, который будет использован для подписания документов.

В ответе метод вернет метаинформацию черновика, которую передали при запросе. А также идентификатор черновика и ссылки для работы с ним. 

Метаинформацию можно отредактировать или дополнить, используя метод `Редактирование описания черновика`_. 

.. _rst-markup-draft:

Получение черновика 
-------------------

Метод: `GET Draft`_

В ответ на вызов данного метода можно получить всю актуальную информацию по черновику:

* заполненную метаинформацию на момент вызова метода;
* перечень документов находящихся в черновике;
* статус черновика. В зависимости от этапа работы с черновиком ему присваивается свой статус:

    * ``new`` — новый;
    * ``checkInProgress`` —  в процессе проверки;
    * ``checked`` — проверенный;
    * ``prepareInProgress`` — в процессе подготовки к отправке;
    * ``readyToSend`` — подготовленный к отправке;
    * ``sendInProgress`` — в процессе отправки;
    * ``sent`` - отправленный;
    * ``transferredToWeb`` - перемещенный в веб-интерфейс Контур.Экстерна;
    * ``sentViaWeb`` — отправленный через веб-интерфейс.

Если черновик уже был отправлен, то будет ссылка на созданный документооборот.

Получение списка черновиков
---------------------------

Метод: `GET Drafts`_

С помощью метода можно получить список созданных черновиков для указанной учетной записи. В ответе метод вернет актуальную информацию по каждому черновику.

Списки черновиков хранятся постранично. Одна страница содержит 100 черновиков. По умолчанию можно получить одну страницу списка. Если черновиков более 100, то оставшиеся можно получить с помощью параметров ``take`` и ``skip``. Например, чтобы получить 140 черновиков можно сделать два запроса. В первом запросе можно не передавать параметры, тогда по умолчанию вернутся первые 100 черновиков. Во втором запросе можно указать параметры ``skip`` = 100, чтобы пропустить первые 100 черновиков, и ``take`` = 40, чтобы запросить остальные.

Также страницы можно получать с помощью ссылок, которые передаются в возвращаемом параметре ``page-links``:

* поле ``href`` содержит ссылку на опреденную страницу списка черновиков;
* поле ``rel`` содержит подсказку на какую страницу указана ссылка относительно текущей. Может принимать следующие значения:

    * первая страница;
    * последняя страница;
    * текущая страница;
    * предыдущая страница;
    * следующая страница. 

Ссылки может не быть, если запрошена последняя или единственная страница. Также не будет ссылки на предыдущую страницу, если запрошена первая страница. 

Редактирование черновика 
------------------------

Метод: `PUT Draft`_

Метод обновляет значения параметров черновика. Если черновик с переданным идентификатором не существует, метод его создаст. 

Удаление черновика 
------------------

Метод: `DELETE Draft`_

Получение описания черновика 
----------------------------

Метод: `GET Meta`_

Получение только метаинформации черновика.

Редактирование описания черновика 
---------------------------------
Метод: `PUT Meta`_

.. _rst-markup-check:

Проверка документов в черновике 
-------------------------------

Метод: `POST Check`_

Вызовом данного метода можно проверить все документы, находящиеся в черновике. Документы проходят форматно-логические контроли по отдельности, но при наличии нескольких документов в черновике или подписей к документам возможно проведение кросс-проверок, то есть проверок на соответствие документов и подписей между собой. 


.. _rst-markup-prepare:

Подготовка документов в черновике к отправке 
--------------------------------------------

Метод: `POST Prepare`_

С помощью данного метода документы подготавливаются к транспортировке их в контролирующий орган: происходит шифрование и сжатие согласно транспортным протоколам.

.. _rst-markup-send:

Отправка документов из черновика 
--------------------------------

Метод: `POST Send`_

На выходе данного метода получается документооборот, с которым продолжается работа с помощью методов блока :doc:`Docflow</dc/index>`.

.. warning:: Методы ``Check``, ``Prepare``, ``Send`` необходимо выполнять :ref:`асинхронно<rst-markup-deferred>`. При таком вызове будет создана задача, статус выполнения которой можно отслеживать по taskId. 

Получение списка задач черновика
--------------------------------

Метод: `GET DraftTasks`_

.. _rst-markup-DraftTasks:

Проверка статуса задачи черновика по TaskId
-------------------------------------------

Метод: `GET DraftTask`_

Метод  возвращает результат выполнения задачи. Модель ответа зависит от типа поставленной задачи: для задачи проверки вернется `модель данных`_ CheckResult, подготовки - PrepareResult, отправки - Docflow, подписания - CryptOperationStatusResult.


.. _rst-markup-CreateWebDraft:

Создание черновика в веб-интерфейсе Контур.Экстерна
---------------------------------------------------

Метод: `POST CreateWebDraft`_

Метод создает общий черновик в веб-интерфейсе Контур.Экстерна и передает метаинформацию черновика из API. В ответе метод вернет ссылку на созданный черновик в веб-интерфейсе.

**Статусы черновика**

* ``TransferedToWeb`` — черновик перемещен и создан в веб-интерфейсе; 
* ``SentViaWeb`` — черновик отправлен в контролирующий орган через веб-интерфейс. 

**Возможные ошибки**

* 400 BadRequest — нельзя загрузить черновик в веб-интерфейс сервиса: выбран неподходящий тип документооборота, добавлены приложения или черновик имеет неподходящий статус (readyToSent, sent).


.. _rst-markup-datatosign:

Подготовка черновика для добавления подписи
-------------------------------------------

Метод `PATCH DataToSign`_

>>>>>>> panshina
Метод добавляет в черновик идентификатор уведомления OrderId для документооборота с МВД и подготавливает черновик к подписанию. Черновик нельзя менять после добавления идентификатора, а в случае изменений, нужно повторно отправить запрос на подготовку черновика.